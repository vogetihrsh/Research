#!/bin/bash

#*********************************************************************#
#       AUTHOR: SRIHARSHA VOGETI				      #
#	EMAIL: vogetisri.harsha@research.iiit.ac.in                   #
#   	SOURCE:                                                       #
#   	DESCRIPTION: pCNVD PIPELINE SCRIPT                            #
#   	LAST UPDATED: 18/06/16                                        #
#*********************************************************************#

shopt -s extglob
#set -e 
start_time=`date +%s`


#PARAMETERS WITH DEFAULT VALUES
window_length=100;	# bin size
no_of_procs=32;		# number of processes
upper_threshold=1.45;	# upper threshold ratio
lower_threshold=0.55;	# lower threshold ratio
input_file="";		# INPUT FILE NAME && MANDATORY PARAMETER
mappability_file=""; 	# MAPPABILITY FILE NAME && MANDATORY PARAMETER
window_file=""; 	# BED FILE CONTAINING WINDOWS && required
config_file="" 		# CONFIG FILE NAME && OPTIONAL
output="";      	# OUTPUT PREFIX && MANDATORY PARAMETER
SOURCEDIR=$(dirname $(readlink -f $0)); # SOURCE DIRECTORY 
cflag=0			# FLAG FOR CHECKING IF CONFIG FILE IS GIVEN 
segFlag=0		# SELECTING SEGMENTATION METHOD 0 FOR CNVTV && 1 FOR DNACOPY
tempString=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1) # ALL NEW FILES CREATED WILL HAVE THIS RANDOM STRING 

#***************************************#
#	READ OPTIONS FROM CMD 		#
#	AND SET PARAMETERS		#
#***************************************#

# SCANNING FOR PARAMETERS
while getopts 'w:p:i:o:m:z:c:u:l:f:d' flag; do
	case "${flag}" in 
	w) window_length="${OPTARG}"  ;;
	p) no_of_procs="${OPTARG}" ;;
	i) input_file="${OPTARG}" ;;
	o) output="${OPTARG}"  ;;
	m) mappability_file="${OPTARG}" ;;
	z) window_file="${OPTARG}" ;;
	c) config_file="${OPTARG}" cflag=1;;
	u) upper_threshold="${OPTARG}" ;;
	l) lower_threshold="${OPTARG}" ;;
	f) merge_fraction="${OPTARG}" ;;
	d) segFlag=1 ;;
	\?) echo "Invalid option: -$OPTARG" >& 2 exit ;;
	esac 
done

# IF YOU USE -C CHECK IF CONFIG FILE EXISTS
if [[ ! -f $config_file && $cflag -eq 1 ]]; then 
	echo "Config File $config_file not found"
	exit 

elif [ $cflag -eq 1 ]; then 
#PARSE INPUT FILE AND GET PARAMETERS
	tr -d '\r' < $config_file > $output"config.temp"
	while IFS='= ' read lhs rhs
	do
		if [[ ! $lhs =~ ^\ *'#' && -n $lhs ]]; then
			rhs="${rhs%%\#*}"    # Del in line right comments
			rhs="${rhs%%*( )}"   # Del trailing spaces
			rhs="${rhs%\"*}"     # Del opening string quotes 
			rhs="${rhs#\"*}"     # Del closing string quotes 
			declare $lhs="$rhs"
		fi
	done < $output"config.temp"
	rm -rf $output"config.temp"
fi	

# MINIMUM REQUIRED PARAMETERS
if [[ -z "$input_file" || -z "$window_file" || -z "$mappability_file" || -z "$output" ]]; then
	echo "Missing one of the required parameters: window_file (-z) mappability_file (-m) input_file (-i) output (-o) " >&2
	exit 
fi

# FILE DOESNT EXIST ERROR
if [[ ! -f $window_file || ! -f $input_file || ! -f $mappability_file ]]; then 
	echo "One of the input files not found" >&2
	exit
fi
#***************************************************************#  		#
#	FUNCTION USED ARE DEFINED BELOW		   		#
#	AVALIABLE FUNCTIONS: printStderr(), for p value       	#
#	retChrom(), runDNACopy(), runTValgorithm() 		#
#***************************************************************#

function Calc_and_Print {
	avg=$1 && shift 
		nWin=$1 && shift 
		winLen=$1 && shift 
		arr=($@)
		echo "arr=as.integer(c(${arr[@]})); AVG=as.integer($avg); 
		c=unlist(lapply(arr,function(x) ifelse(x<AVG,ppois(x,lambda=AVG),ppois(x,lambda=AVG,lower=FALSE) ) ));  
	d=unlist(lapply(arr,function(x) dpois(x,lambda=AVG)));
	for (i in 1:length(c)) cat(c[i],d[i],'\n')" |R --slave -q | paste $output"_pCNVD_temp.cnv" - | awk -v nWin="$nWin" -v OFS='\t' -v winLen="$winLen" '{x2=$NF;x1=$(NF-1);$NF="";$(NF-1)="";
	m=($2-$1)/(winLen); print $0,x1 }' > $output"_pCNVD.bed" ;

}

# PRINTS ON STDERR
function printStderr {
	echo "$@" >&2;
}

# GET CHROMOSOME FUNCTION 
function retChrom {
	windowFile=$1
	cName=$(head -1 $windowFile | awk '{print $1}')
	echo $cName
}

#***********************************#
#	CODE FOR DNA COPY	    #
#***********************************#
function runDNACopy {
	# Run R script and generate segments 
	Rscript $SOURCEDIR/RunDNACopy.R $output"_pCNVD.input" $numWindows > $tempString".Dtemp"
	
	# convert output into .input value
	awk -v outputFile=$output"_pCNVD.output" ' NR>5 {
		for(i=1; i<=$6; ++i){
			   print $7 >> outputFile
			}
		}' $tempString".Dtemp"
	rm -rf $tempString".Dtemp"
}


#*********************************#
# CODE FOR RUNNING TV ALGORITHM   #
# DIVIDE INPUT FILE INTO CHUNKS   #
# RUN SEGMENTATION FOR EACH CHUNK #
# MERGE BACK CHUNKS 		  # 
#*********************************#
function runTVAlgorithm {
	
	# calculate number of entries in each chunk 
	rm -rf $output"_inp"*
	y=$(wc -l $output"_pCNVD.input" | awk '{print $1}')
	N=$y
	y=`expr $y / $no_of_procs`;
	split -l $y $output"_pCNVD.input" $output"_inp";
	p=`expr $no_of_procs - 1`
	q=`expr $p + 1`
	k=0
	FILE=$output"_inp"$q;
		
	# change splits name
	for i in $( ls $output"_inp"* )
	do
	mv -f $i $output"_inp"$k
	((k++))
	done
	
	# check for the last remaining input values
	if [ -f $FILE ];
	then
		cat $FILE >> $output"_inp"$p
		rm $output"_inp"$q
	fi
	
	# calculate average value by calling external cpp script
	avg1=$( $SOURCEDIR"/calAvg" $N < $output"_pCNVD.input" | awk '{print $1}' );

	# comes into play when creating overlapping input files, otherwise has no affect. But needded
	stop1=`expr $no_of_procs - 1`
	for((i=0; i<stop1; i++ )); do
		j=`expr $i + 1`
		#tail -20 $output"_inp"$i > $output$tempString
		cat $output"_inp"$j > $output$tempString
		mv $output$tempString $output"_inp"$j
	done

	# run segmentation algorith using segment 
	mpirun -np $no_of_procs $SOURCEDIR/segment $output;
	rm -rf $output"_inp"*;
	rm -rf $output"_pCNVD.output"
			
	# merge segmented chunk files 
	for ((n=0;n<$no_of_procs;n++))
	do
		cat $output"_out"$n >> $output"_pCNVD.output"
		rm -rf $output"_out"$n
	done

}

chrName=$(retChrom $window_file) # chromosome name 


#***********************************************#
#	MAIN FUNCTION STARTS HERE		#
#	PRECPROCESS-SEGMENTATION-POSTPROCESS	#
#***********************************************#

# DATA PREPARATION AND FILTERING 
samtools view -@ 4 -q 1 -bh $input_file > $output"_temp1.bam";
bedtools coverage -abam $output"_temp1.bam" -b $window_file > $output"_temp1.bed";
rm -rf $output"_reads.bed";

sort -n -k2 $output"_temp1.bed" -o $output"_temp1.bed";
paste $output"_temp1.bed" $mappability_file > $output"_temp2";
mv $output"_temp2" $output"_temp1.bed";
awk '{if($4!=0&&$5!=0&&$8>=0.5)print $4;}' $output"_temp1.bed" > $output"_pCNVD.input";
awk '{if($4!=0&&$5!=0&&$8>=0.5)print $2,$3;}' $output"_temp1.bed" > $output"_pCNVD.bincor"; 
rm -rf $output"_temp1.bed" $output"_temp1.bam";
printStderr "Read Depth file generation...DONE"

numWindows=$(wc -l $output"_pCNVD.input" | awk '{print $1}')
avg1=$($SOURCEDIR"/calAvg" $numWindows < $output"_pCNVD.input" | awk '{print $1}');

##############################################################################################


### CALL SEGMENTATION ALGORITHMS #######
if [[ segFlag -eq 0 ]]; then 
	runTVAlgorithm ;
else 
	runDNACopy;
fi	
printStderr "Started Making CNV calls"

#################################################################################################

##### POST PROCESSING #####
paste $output"_pCNVD.bincor" $output"_pCNVD.output" > $output"_pCNVD.call";
ll=$lower_threshold;
uu=$upper_threshold;
bedcnv="_pCNVD.bed";
lower_cutoff=$(echo $ll $avg1 | awk '{print $1*$2}' )
upper_cutoff=$(echo $uu $avg1 | awk '{print $1*$2}' )
awk -v lc="$lower_cutoff" -v hc="$upper_cutoff" -v outfile="$output$bedcnv" -v avg="$avg1" -v chrName="$chrName" '

# temp function delete after done
function isCopyNumberZero(cAvg,cCount)
{
	average = cAvg/cCount;
	average = (average*2)/avg;
	return int(average + 0.5);
}

#CONDITION IF TWO EVENTS SHOULD BE MERGED OR NOT 
function shouldMerge(prevStart, prevEnd, curStart, curEnd)
{
	Ratio=(curStart-prevEnd-1)/(curEnd-prevStart+1);
	if(Ratio<0.2)
		return 1;
	else 
		return 0;
}

function absolute(n){
	if(n<0)
		return -n;
	else
		return n;
}

function checkzero(w1,w2,c1,c2){
	if(c1<0.55 && c2<0.55 && (w2-w1)<10000)
		return 1;
	else
		return 0;
}

BEGIN {
	entryPointer=-1;
	
	prev=-1;
	cnvType=-1;
	curAvg=0;
	count=0;
	
	prevRD=-1;
	prevEndPoint=-1;
	prevStart=-1;
	
	PTR=0;
	diff=0;
}

{
	diff=absolute(prevRD-$3);
	if(entryPointer==1&&($3<=lc||$3>=hc)&&(diff<avg/2)&&prevEndPoint==$1)
	{
		curAvg=curAvg+$3;
		count=count+1;
	}

	else if(entryPointer==1)
	{
		entryPointer=-1;
		epoint=prevEndPoint;
		curAvg=curAvg/count;

		cn=(curAvg*2)/avg;
		if(count>1){
			PTR=PTR+1;
			CNVARR[PTR,1]=spoint;CNVARR[PTR,2]=epoint;CNVARR[PTR,3]=cnvType;CNVARR[PTR,4]=cn;
		}
		cnvType=-1;
		curAvg=0;
		count=0;
	}

	if(entryPointer==-1 && ($3<=lc || $3>=hc) )
	{
		entryPointer=1;
		spoint=$1;

		if($3<=lc)
			cnvType=0;
		else
			cnvType=1;
		count = count +1;
		curAvg = curAvg + $3;
	}
	prevEndPoint = $2;
	prevStart=$1;
	prevRD=$3;
}

END{
	FLAG=0;
	CSTART=-1;CSTOP=-1;CEVENT=-1;CCPOY=0;	#CURRENT START, STOP, TYPE OF EVENT AND COPY NUMBER 
	MAX_WIN=0;	#MAX WINDOW length IN THE CNVS PREDICTED
	i=1;
	
	#WHILE LOOP FOR MERGING CNVS AND WRITTING THE RESULTS TO OUTPUT FILE 
	while(i<=PTR){
		if(FLAG==0)
		{
			CSTART=CNVARR[i,1];
			CSTOP=CNVARR[i,2];
			CEVENT=CNVARR[i,3];
			CCOPY=CNVARR[i,4];
			FLAG=1;
			i++;
		}
		else if(CEVENT==CNVARR[i,3]&& absolute(CCOPY-CNVARR[i,4])<0.5&& (shouldMerge(CSTART,CSTOP,CNVARR[i,1],CNVARR[i,2])==1||checkzero(CSTOP,CNVARR[i,1],CCOPY,CNVARR[i,4])==1)){
			t1=(CSTOP-CSTART);
			t2=CNVARR[i,2]-CNVARR[i,1];
			CCOPY=(t1*CCOPY+t2*CNVARR[i,4])/(t1+t2);
			CSTOP=CNVARR[i,2];
			i++;
		}
		else{
			printf ("%s\t%d\t%d\t%d\t%.2f\n",chrName,CSTART,CSTOP,CEVENT,CCOPY) >> outfile;
			FLAG=0;
			
			# CALCULATE MAXIMUM WINDOW LENGTH
			temp=CSTOP-CSTART;
			if(MAX_WIN<temp)
				MAX_WIN=temp;
		}
	}

	#PRINT THE LEFTOVER CNV, IF ANY
	if(FLAG){
			printf ("%s\t%d\t%d\t%d\t%.2f\n",chrName,CSTART,CSTOP,CEVENT,CCOPY) >> outfile;
			
			# CALCULATE MAXIMUM WINDOW LENGTH
			temp=CSTOP-CSTART;
			if(MAX_WIN<temp)
				MAX_WIN=temp;
		#	printf("%d",MAX_WIN);	
	}
}
'   $output"_pCNVD.call"


rm -rf $output"_pCNVD.call"

printStderr "COMPLETED...!"
end_time=`date +%s`
echo "Time taken: "$((end_time-start_time))"s"
